name: 'üì¶ Release'
run-name: 'üì¶ Release'

# #
#   Triggers
# #

on:
    workflow_dispatch:
        inputs:

            # #
            #   Name of the plugin to use when creating the release zip filename
            #     e.g: windows-update-utility-v1.0.0.zip
            # #

            PROJECT_NAME:
                description:        'üì¶ Name of Project'
                required:           true
                default:            'windows-update-utility'
                type:               string

            # #
            #   Version to release
            #     e.g: v1.0.0
            # #

            PLUGIN_VERSION:
                description:        'üì¶ Version'
                required:           true
                default:            '1.x.x'
                type:               string

            # #
            #   ENABLE:   the changelog generated in releases tab will only display single commits.
            #   DISABLE:  the changelog shows pull requests completed based on their labels
            # #

            CHANGELOG_MODE_COMMIT:
                description:        'üìë Use Commits Instead of PRs'
                required:           true
                default:            true
                type:               boolean

            # #
            #   ENABLE:   Will show all types of commits, including uncategorized
            #   DISABLE:  WIll only show actions that have been categorized using the format
            #                type(scope): description
            #                type: description
            # #

            SHOW_UNCATEGORIZED:
                description:        'üóÇÔ∏è Show Uncategorized Commits'
                required:           true
                default:            false
                type:               boolean

            # #
            #   ENABLE:     released version will be marked as pre-release
            #   DISABLE:    release version will be marked as stable / normal release
            # #

            PRERELEASE:
                description:        'üß™ Build RC (Pre-release)'
                required:           true
                default:            false
                type:               boolean

            # #
            #   Release Candidate version number
            #   this will be added to the end of your released app in the releases page.
            #     e.g: windows-update-utility-v1.0.0-rc.1
            # #

            VERSION_RC:
                description:        'üß™ RC (Pre-release) Ver (windows-update-utility-rc.v1)'
                required:           false
                type:               string
                default:            '1'

# #
#   environment variables
# #

env:
    PROJECT_NAME:                   ${{ github.event.inputs.PROJECT_NAME || 'windows-update-utility' }}
    PROJECT_VERSION:                ${{ github.event.inputs.PLUGIN_VERSION || '1.x.x' }}
    CHANGELOG_MODE_COMMIT:          true
    SHOW_UNCATEGORIZED:             false
    PRERELEASE:                     false
    VERSION_RC:                     '1'
    ASSIGN_USER:                    Aetherinox
    BOT_NAME_1:                     EuropaServ
    BOT_NAME_2:                     BinaryServ
    BOT_NAME_DEPENDABOT:            dependabot[bot]
    BOT_NAME_RENOVATE:              renovate[bot]

# #
#   jobs
# #

jobs:

    # #
    #   Jobs ‚Ä∫ Upload
    # #

    job-upload:
        name: >-
            üì¶ Package ‚Ä∫ Upload
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write
        outputs:
            project_tag_prev: ${{ steps.task_upload_tag_previous.outputs.PROJECT_TAG_PREV }}
        steps:

            # #
            #   Upload ‚Ä∫ Start
            # #

            - name: '‚úÖ Start'
              id: task_upload_start
              run: |
                  echo 'Starting build'

            # #
            #   Upload ‚Ä∫ Checkout
            # #

            - name: '‚òëÔ∏è Checkout'
              id: task_upload_checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # #
            #   Upload ‚Ä∫ Set Env Variables
            # #

            - name: >-
                üïõ Get Timestamp
              id: task_upload_label_set_timestamp
              run: |
                  echo "NOW=$(date +'%m-%d-%Y %H:%M:%S')" >> $GITHUB_ENV
                  echo "NOW_SHORT=$(date +'%m-%d-%Y')" >> $GITHUB_ENV
                  echo "NOW_LONG=$(date +'%m-%d-%Y %H:%M')" >> $GITHUB_ENV
                  echo "NOW_DOCKER_LABEL=$(date +'%Y%m%d')" >> $GITHUB_ENV

            # #
            #   Upload ‚Ä∫ Get Previous Tag
            # #

            - name: 'üè∑Ô∏è Get Previous tag'
              id: task_upload_tag_previous
              uses: 'WyriHaximus/github-action-get-previous-tag@v1'
              with:
                  fallback: 1.0.0

            # #
            #   Upload ‚Ä∫ Tags ‚Ä∫ Print Current Version
            # #

            - name: 'üî® Debug: Previous Github Tag'
              id: task_upload_tag_current
              run: |
                  echo -e ${{ steps.task_upload_tag_previous.outputs.tag }}
                  echo "PROJECT_TAG_PREV=${{ steps.task_upload_tag_previous.outputs.tag }}" >> $GITHUB_OUTPUT

            # #
            #   Upload ‚Ä∫ Artifacts ‚Ä∫ wputility.bat
            # #

            - name: >-
                  üìã Upload Artifacts ‚Ä∫ wputility.bat
              id: task_upload_artifact_reg_bat
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: wputility.bat
                  path: wputility.bat
                  retention-days: 30

            # #
            #   Upload ‚Ä∫ Artifacts ‚Ä∫ windows-updates-pause.reg
            # #

            - name: >-
                  üìã Upload Artifacts ‚Ä∫ windows-updates-pause.reg
              id: task_upload_artifact_reg_pause
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: windows-updates-pause.reg
                  path: windows-updates-pause.reg
                  retention-days: 30

            # #
            #   Upload ‚Ä∫ Artifacts ‚Ä∫ windows-updates-unpause.reg
            # #

            - name: >-
                  üìã Upload Artifacts ‚Ä∫ windows-updates-unpause.reg
              id: task_upload_artifact_reg_unpause
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: windows-updates-unpause.reg
                  path: windows-updates-unpause.reg
                  retention-days: 30

    # #
    #   Job > Release
    # #

    job-release:
        name: >-
            üì¶ Package ‚Ä∫ Release
        runs-on: ubuntu-latest
        needs: [ job-upload ]
        permissions:
            contents: write
            packages: write
        env:
            PROJECT_TAG_PREV: ${{ needs.job-upload.outputs.project_tag_prev }}
        steps:

            # #
            #   Release ‚Ä∫ Start
            # #

            - name: '‚úÖ Start'
              id: task_release_start
              run: |
                  echo 'Starting build'

            # #
            #   Release > Checkout
            # #

            - name: '‚òëÔ∏è Checkout'
              id: task_release_checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # #
            #   Release ‚Ä∫ Set Env Variables
            # #

            - name: >-
                üïõ Get Timestamp
              id: task_release_label_set_timestamp
              run: |
                  echo "NOW=$(date +'%m-%d-%Y %H:%M:%S')" >> $GITHUB_ENV
                  echo "NOW_SHORT=$(date +'%m-%d-%Y')" >> $GITHUB_ENV
                  echo "NOW_LONG=$(date +'%m-%d-%Y %H:%M')" >> $GITHUB_ENV
                  echo "NOW_DOCKER_LABEL=$(date +'%Y%m%d')" >> $GITHUB_ENV

            # #
            #   Release ‚Ä∫ View passed values
            # #

            - name: '‚öôÔ∏è Debug ‚Ä∫ Passed Values'
              id: task_release_debug_print_vals_1
              run: |
                  echo "TAG VERSION (Previous) ........... ${{ env.PROJECT_TAG_PREV }}"
                  echo "TAG VERSION (Next) ............... ${{ env.PROJECT_VERSION }}"

            # #
            #   Release ‚Ä∫ Tags ‚Ä∫ Pre Create
            #
            #   in order to use the changelog github action, you must pre-create the tag otherwise
            #   the changelog action will have no idea what tag you are going to be creating and
            #   the list of commits will not be for the correct release.
            # #

            - name: 'üîñ Tag ‚Ä∫ Pre Create ${{ env.PROJECT_VERSION }}'
              id: task_release_tag_create
              uses: rickstaa/action-create-tag@v1
              with:
                  tag: ${{ env.PROJECT_VERSION }}
                  tag_exists_error: false
                  message: "Latest release"
                  gpg_private_key: ${{ secrets.ADMINSERV_GPG_KEY_ASC }}
                  gpg_passphrase: ${{ secrets.ADMINSERV_GPG_PASSPHRASE }}

            # #
            #   Release ‚Ä∫ Tags ‚Ä∫ Confirm
            # #

            - name: 'üîñ Tag ‚Ä∫ Confirm ${{ env.PROJECT_VERSION }}'
              id: task_release_tag_get
              run: |
                  echo "Tag already present: ${{ env.TAG_EXISTS }}"
                  echo "Tag already present: ${{ steps.task_release_tag_create.outputs.tag_exists }}"

            # #
            #   Release ‚Ä∫ Contributor Images
            # #

            - name: 'ü•∏ Contributors ‚Ä∫ Generate'
              id: task_release_contribs_generate
              uses: jaywcjlove/github-action-contributors@main
              with:
                  filter-author: (renovate\[bot\]|renovate-bot|dependabot\[bot\])
                  output: CONTRIBUTORS.svg
                  avatarSize: 42

            # #
            #   Release ‚Ä∫ Generate Changelog
            #
            #   generates a changelog from the github api. requires a PREVIOUS_TAG in order to figure
            #   out the changes made between the two versions.
            #
            #   outputs:
            #     ${{ steps.changelog.outputs.changelog }}
            # #

            - name: 'üìù Changelog ‚Ä∫ Pre Setup (Categorized Commits)'
              id: task_release_changelog_commits_tags_print
              run: |
                  echo "PROJECT_TAG_LAST=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
                  echo "PROJECT_COMMIT_LAST=$(git rev-parse HEAD)" >> $GITHUB_ENV

            # #
            #   Release ‚Ä∫ Release ‚Ä∫ Changelog ‚Ä∫ Build (Categorized)
            #
            #   generates a changelog from the github api. requires a PROJECT_TAG_LAST in order to figure
            #   out the changes made between the two versions.
            #
            #   outputs:
            #       ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            # #

            - name: 'üìù Changelog ‚Ä∫ Build (Categorized)'
              id: task_release_changelog_categorized
              uses: mikepenz/release-changelog-builder-action@v5
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, false ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, false )
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN }}
                  #fromTag: "${{ env.PROJECT_TAG_LAST }}"
                  #toTag: "${{ github.ref }}"
                  configuration: ".github/changelog-configuration.json"
                  ignorePreReleases: false
                  commitMode: ${{ inputs.CHANGELOG_MODE_COMMIT || env.CHANGELOG_MODE_COMMIT }}
                  fetchReleaseInformation: true
                  fetchViaCommits: true
                  configurationJson: |
                    {
                      "template": "## Release Info \n| Item | Value |\n| --- | --- |\n|<sub>Stamp</sub>|<sub>`#{{FROM_TAG}}-#{{FROM_TAG_DATE}} üî∫ #{{TO_TAG}}-#{{TO_TAG_DATE}}`</sub>|\n|<sub>Last Release</sub>|<sub>`#{{DAYS_SINCE}} days ago`</sub>|\n\n<br>\n\n---\n\n<br>\n\n### What's New\nThis release contains the following changes:\n\n<br>\n\n---\n\n<br>\n\n### Statistics\nHow the files have changed:\n<ul><li><a href='#{{RELEASE_DIFF}}'>Changed files</a>  : <b>#{{CHANGED_FILES}}</b> </li><li>Changes  : <b>#{{CHANGES}}</b> </li><li>Commits : <b>#{{COMMITS}}</b> </li><li>Additions : <b>#{{ADDITIONS}}</b></li><li>Deletions : <b>#{{DELETIONS}}</b></li><li>PRs (categorized) : <b>#{{CATEGORIZED_COUNT}}</b></li><li>PRs (uncategorized) : <b>#{{UNCATEGORIZED_COUNT}}</b></li><li>PRs (open) : <b>#{{OPEN_COUNT}}</b></li>\n<br />\n</ul>\n\n<br>\n\n---\n\n<br>\n\n### Pull Requests\nThis release is associated with the following pull requests:\n#{{CHANGELOG}}\n\n<br>\n\n---\n\n<br>\n\n"
                    }
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN }}

            # #
            #   Release ‚Ä∫ Release ‚Ä∫ Changelog ‚Ä∫ Build (Uncategorized)
            #
            #   generates a changelog from the github api. requires a PROJECT_TAG_LAST in order to figure
            #   out the changes made between the two versions.
            #
            #   outputs:
            #       ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            #
            #   shows only categorized commits using the commit standards
            #                type(scope): description
            #                type: description
            # #

            - name: 'üìù Changelog ‚Ä∫ Build (Uncategorized)'
              id: task_release_changelog_uncategorized
              uses: mikepenz/release-changelog-builder-action@v5
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, true ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, true )
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN }}
                  configuration: ".github/changelog-configuration.json"
                  ignorePreReleases: false
                  commitMode: ${{ inputs.CHANGELOG_MODE_COMMIT }}
                  fetchReleaseInformation: true
                  fetchViaCommits: true
                  configurationJson: |
                    {
                      "template": "## Release Info \n| Item | Value |\n| --- | --- |\n|<sub>Stamp</sub>|<sub>`#{{FROM_TAG}}-#{{FROM_TAG_DATE}} üî∫ #{{TO_TAG}}-#{{TO_TAG_DATE}}`</sub>|\n|<sub>Last Release</sub>|<sub>`#{{DAYS_SINCE}} days ago`</sub>|\n\n<br>\n\n---\n\n<br>\n\n### What's New\nThis release contains the following changes:\n\n<br>\n\n---\n\n<br>\n\n### Statistics\nHow the files have changed:\n<ul><li><a href='#{{RELEASE_DIFF}}'>Changed files</a>  : <b>#{{CHANGED_FILES}}</b> </li><li>Changes  : <b>#{{CHANGES}}</b> </li><li>Commits : <b>#{{COMMITS}}</b> </li><li>Additions : <b>#{{ADDITIONS}}</b></li><li>Deletions : <b>#{{DELETIONS}}</b></li><li>PRs (categorized) : <b>#{{CATEGORIZED_COUNT}}</b></li><li>PRs (uncategorized) : <b>#{{UNCATEGORIZED_COUNT}}</b></li><li>PRs (open) : <b>#{{OPEN_COUNT}}</b></li>\n<br />\n</ul>\n\n<br>\n\n---\n\n<br>\n\n### Commits (#{{UNCATEGORIZED_COUNT}})\nThe following commits are uncategorized:\n#{{UNCATEGORIZED}}\n\n<br>\n\n---\n\n<br>\n\n### Pull Requests\nThis release is associated with the following pull requests:\n#{{CHANGELOG}}\n\n<br>\n\n"
                    }
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN }}

            # #
            #   Release ‚Ä∫ Release ‚Ä∫ Changelog ‚Ä∫ Convert step into ENV
            #
            #   This is a requirement in order for the action mikepenz/release-changelog-builder-action@v5 to work properly.
            #   If you use special characters like quotes and tildes in your push comments, bash will have no way of knowing
            #   if it's part of the changelog, or code itself.
            #
            #   By converting the step into an env var, we quote the text, and it fixes the issue.
            #
            #   For every step that you need to print the changelog text, first define the env var
            #   env:
            #       CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            #
            #   Then you can call the changelog in the body / run command with
            #       echo "$CHANGELOG_CATEGORIZED"
            # #

            - name: 'üôä Changelog ‚Ä∫ Step to Env ‚Ä∫ Categorized'
              id: task_release_changelog_escape_categorized
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, false ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, false )
              env:
                  CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
              run: |
                  echo "$CHANGELOG_CATEGORIZED"

            - name: 'üôä Changelog ‚Ä∫ Step to Env ‚Ä∫ Uncategorized'
              id: task_release_changelog_escape_uncategorized
              if: |
                  startsWith( inputs.SHOW_UNCATEGORIZED, true ) ||
                  startsWith( env.SHOW_UNCATEGORIZED, true )
              env:
                  CHANGELOG_UNCATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
              run: |
                  echo "$CHANGELOG_UNCATEGORIZED"

            # #
            #   Release ‚Ä∫ Artifacts ‚Ä∫ Download
            # #

            - name: 'üìÅ Download ‚Ä∫ Artifacts ‚Ä∫ wputility.bat'
              uses: actions/download-artifact@v4
              with:
                  name: wputility.bat

            - name: 'üìÅ Download ‚Ä∫ Artifacts ‚Ä∫ windows-updates-pause.reg'
              uses: actions/download-artifact@v4
              with:
                  name: windows-updates-pause.reg

            - name: 'üìÅ Download ‚Ä∫ Artifacts ‚Ä∫ windows-updates-unpause.reg'
              uses: actions/download-artifact@v4
              with:
                  name: windows-updates-unpause.reg

            # #
            #   Release ‚Ä∫ List Tree
            # #

            - name: '‚öôÔ∏è Debug ‚Ä∫ Tree Listing'
              id: task_release_debug_tree
              run: |
                  tree

            # #
            #   Release ‚Ä∫ Post Release (Stable)
            #
            #   outputs:
            #       [RELEASE ID]:
            #           ${{ steps.task_release_bundle_rc.outputs.id
            #           ${{ steps.task_release_bundle_st.outputs.id
            # #

            - name: 'üè≥Ô∏è Post ‚Ä∫ Stable'
              id: task_release_bundle_st
              uses: softprops/action-gh-release@v2
              if: |
                  startsWith( inputs.PRERELEASE, false ) ||
                  startsWith( env.PRERELEASE, false )
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN_CL }}
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN_CL }}
                  name: v${{ env.PROJECT_VERSION }}
                  tag_name: ${{ env.PROJECT_VERSION }}
                  target_commitish: ${{ github.event.inputs.branch }}
                  draft: false
                  generate_release_notes: false
                  files: |
                      wputility.bat
                      windows-updates-pause.reg
                      windows-updates-unpause.reg
                  prerelease: false
                  body: |
                      ${{ steps.task_release_changelog_categorized.outputs.changelog }}
                      ${{ steps.task_release_changelog_uncategorized.outputs.changelog }}

            # #
            #   Release ‚Ä∫ Post Release (Release Candidate)
            #
            #   outputs:
            #       [RELEASE ID]:
            #           ${{ steps.task_release_bundle_rc.outputs.id
            #           ${{ steps.task_release_bundle_st.outputs.id
            # #

            - name: 'üè≥Ô∏è Post ‚Ä∫ Release Candidate'
              uses: softprops/action-gh-release@v2
              id: task_release_bundle_rc
              if: |
                  startsWith( inputs.PRERELEASE, true ) ||
                  startsWith( env.PRERELEASE, true )
              env:
                  GITHUB_TOKEN: ${{ secrets.ADMINSERV_TOKEN }}
              with:
                  token: ${{ secrets.ADMINSERV_TOKEN }}
                  name: v${{ env.PROJECT_VERSION }}
                  tag_name: ${{ env.PROJECT_VERSION }}
                  target_commitish: ${{ github.event.inputs.branch }}
                  draft: false
                  generate_release_notes: false
                  files: |
                      wputility.bat
                      windows-updates-pause.reg
                      windows-updates-unpause.reg
                  prerelease: false
                  body: |
                      > [!WARNING]
                      > This is a **release candidate**, which means it is not a stable release and could contain bugs. You should download it at your own risk.

                      ${{ steps.task_release_changelog_categorized.outputs.changelog }}
                      ${{ steps.task_release_changelog_uncategorized.outputs.changelog }}

            # #
            #   Release ‚Ä∫ Print Status
            #
            #   For every step that you need to print the changelog text, first define the env var
            #   env:
            #       CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
            #
            #   Then you can call the changelog in the body / run command with
            #       echo "$CHANGELOG_CATEGORIZED"
            # #

            - name: 'üéõÔ∏è Status ‚Ä∫ Print'
              id: task_release_status_print
              env:
                  CHANGELOG_CATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
                  CHANGELOG_UNCATEGORIZED: ${{ steps.task_release_changelog_categorized.outputs.changelog }}
              run: |
                  echo "Printing Variables"
                  echo
                  echo "---- CHANGELOG ---------------------------------------------------------------"
                  echo "$CHANGELOG_CATEGORIZED"
                  echo "$CHANGELOG_UNCATEGORIZED"
                  echo "---- CHANGELOG ---------------------------------------------------------------"
                  echo ""
                  echo ""
                  echo "---- VARIABLES ---------------------------------------------------------------"
                  echo "Package Version ............ ${{ env.PROJECT_VERSION }}"
                  echo "Tag: Previous .............. ${{ env.PROJECT_TAG_LAST }}"
                  echo "Tag: Now.... ............... ${{ github.ref }}"
                  echo "Last Commit ................ ${{ env.PROJECT_COMMIT_LAST }}"
                  echo "ST Output ID ............... ${{ steps.task_release_bundle_st.outputs.id }}"
                  echo "RC Output ID ............... ${{ steps.task_release_bundle_rc.outputs.id }}"
                  echo "---- CHANGELOG ---------------------------------------------------------------"
